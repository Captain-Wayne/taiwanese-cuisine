version: 2

jobs:
  
  build_and_test:
    docker:
      - image: circleci/golang:1.12
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Building Docker image
          command: |
            docker build -t temp .
      - run:
          name: Unit testing
          command: |
            docker run temp go test ./... --coverpkg=./...

  build_and_deploy:
    docker:
      - image: circleci/golang:1.12
    steps:
      - checkout
      - setup_remote_docker
      - run: 
          name: Setting image name and tag name
          command: |            
            echo 'export TAG=0.1.${CIRCLE_BUILD_NUM}' >> $BASH_ENV
            echo 'export IMAGE_NAME=$DOCKER_LOGIN/taiwanese-cuisine' >> $BASH_ENV 
            
      - run: 
          name: Setting up AWS env
          command: |
            sudo apt-get -y -qq update 
            sudo apt-get install python-pip python-dev build-essential awscli
            sudo pip install --upgrade setuptools
            sudo pip install awsebcli --upgrade 
            mkdir eb_deployment

      - run:
          name: Fetching Firestore credential from s3
          command: |
            aws s3 sync s3://taiwanese-cuisine . 

      - run:
          name: Building Docker image
          command: |
            docker build -t ${IMAGE_NAME}:$TAG .

      - run:
          name: Push to Dockerhub
          command: |
            echo $DOCKER_PWD | docker login -u $DOCKER_LOGIN --password-stdin
            docker push ${IMAGE_NAME}:$TAG

      - run:
          name: Deploy to AWS EB
          command: |
            cd eb_deployment
            JSON=' 
            {
                "AWSEBDockerrunVersion": 1,
                "Image": {
                  "Name": "%s",
                  "Update": true
                },
                "Ports": [
                  {
                    "ContainerPort": 8081
                  }
                ]
            }\n
            '
            printf "$JSON" "$IMAGE_NAME:$TAG" >> Dockerrun.aws.json
            eb init -p docker --region ap-northeast-2 taiwanese-cuisine
            eb list --all | grep backend && echo backend | eb terminate backend
            eb create -r ap-northeast-2 -i m5.large --elb-type application -c taiwanese-cuisine-backend backend
  
workflows:
  version: 2
  cicd:
    jobs:
      - build_and_test
      - build_and_deploy
          requires: 
            - build_and_test
          filters:
            branches:
              only:
                - /(release|master).*/
